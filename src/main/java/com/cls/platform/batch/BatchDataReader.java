/*
 * Copyright (c) 2018,  Cloud Lending, a Q2 Company.
 * All Rights Reserved.
 */

package com.cls.platform.batch;


import com.cls.platform.batch.domain.ClsContract;
import com.cls.platform.core.config.PlatformConstants;
import com.cls.platform.entity.BatchJob;
import com.cls.platform.entity.TenantEnvironment;
import com.cls.platform.exception.PlatformException;
import com.cls.platform.repository.BatchJobRepository;
import com.cls.platform.repository.TenantEnvironmentRepository;
import com.cls.platform.repository.operations.BatchJobDBOperations;
import com.cls.platform.repository.operations.TenantEnvironmentDBOperations;
import com.sforce.async.*;
import com.sforce.soap.partner.PartnerConnection;
import com.sforce.ws.ConnectionException;
import com.sforce.ws.ConnectorConfig;
import com.sforce.ws.util.FileUtil;
import okhttp3.OkHttpClient;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.batch.core.StepExecution;
import org.springframework.batch.core.annotation.BeforeStep;
import org.springframework.batch.item.ExecutionContext;
import org.springframework.batch.item.file.FlatFileItemReader;
import org.springframework.batch.item.file.mapping.DefaultLineMapper;
import org.springframework.batch.item.file.transform.DelimitedLineTokenizer;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.FileSystemResource;
import org.springframework.core.io.Resource;

import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStream;

//TODO: was SForceDataReader
public class BatchDataReader extends FlatFileItemReader<ClsContract> {

    private static final Logger log = LoggerFactory.getLogger(BatchDataReader.class);

    @Autowired  // This gets the bean called batchJobRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private TenantEnvironmentRepository tenantEnvironmentRepository;

    @Autowired
    private BatchJobRepository batchJobRepository;

    @Autowired
    private SalesforceLoginService salesforceLoginService;

    private PartnerConnection partnerConnection = null;

    private OkHttpClient client = new OkHttpClient();

    private BulkConnection bulkConnection = null;

    private TenantEnvironment tenantEnvironment;
    private BatchJob batchJob;
    private SalesforceConnectionAttributes connectionAttributes;

    //TODO: where do we parameterize these?
    private static final String loginHost = "test.salesforce.com";
    private static final String soapService = "/services/Soap/u/42.0";

    private String tenant = PlatformConstants.DEFAULT_TENANT_NAME;

    private String env = PlatformConstants.DEFAULT_ENV_NAME;

    private String batchJobName = PlatformConstants.DEFAULT_JOB_NAME;

    private String batchJobId = "";

    public String getTenant() {
        return tenant;
    }

    public void setTenant(String tenant) {
        this.tenant = tenant;
    }

    public String getEnv() {
        return env;
    }

    public void setEnv(String env) {
        this.env = env;
    }

    public String getBatchJobName() {
        return batchJobName;
    }

    public void setBatchJobName(String batchJobName) {
        this.batchJobName = batchJobName;
    }


    public String getBatchJobId() {
        return batchJobId;
    }

    public void setBatchJobId(String batchJobId) {
        this.batchJobId = batchJobId;
    }

    BatchDataReader() {
        super();
        setStrict(false);
    }

    @BeforeStep
    public void beforeStep(final StepExecution stepExecution) throws PlatformException {
        Resource resource = null;

        try {
            ExecutionContext context = stepExecution.getExecutionContext();
            log.debug("*** batch job repository " + batchJobRepository);
            batchJob = BatchJobDBOperations.getBatchJobByName(batchJobRepository, tenant, batchJobName);
            log.debug("Batch job in BatchJobDataReader is " + batchJob);
            tenantEnvironment = TenantEnvironmentDBOperations.getTenantEnvironmentByName
                    (tenantEnvironmentRepository, tenant, env);
            log.debug("Tenant environment in BatchJobDataReader is " + tenantEnvironment);
            if (batchJob != null && tenantEnvironment != null){
                connectionAttributes = createSalesforceConnectionAttributes();

                SalesforceAuthResponse authResponse = salesforceLoginService.login(connectionAttributes);
                context.put("sforce_auth", authResponse);

                prepareCSVFile();
            } else {
                log.debug("*** null batch job or tenant environment, unable to read");
            }

            //get the regular resource
            resource = new FileSystemResource("loan__Loan_Account__c.csv");

        } catch (Exception e) {
            log.error("Error Resolving Resource", e);
            throw new PlatformException("Error Resolving Resource", e);
        }
        setResource(resource);
    }

    public void prepareCSVFile() {
        if (!loginToTheSoapEndpoint()) {
            return;
        }
        try {
            String query = batchJob.getQuery();

            System.out.println("*****************************************");
            System.out.println("-------------- QUERY ----------" + query);
            System.out.println("*****************************************");

            JobInfo job = new JobInfo();
            job.setObject("loan__Loan_Account__c");

            job.setOperation(OperationEnum.query);
            job.setConcurrencyMode(ConcurrencyMode.Parallel);
            job.setContentType(ContentType.CSV);

            job = bulkConnection.createJob(job);
            assert job.getId() != null;

            job = bulkConnection.getJobStatus(job.getId());

            long start = System.currentTimeMillis();

            BatchInfo info = null;
            ByteArrayInputStream bout = new ByteArrayInputStream(query.getBytes());
            info = bulkConnection.createBatchFromStream(job, bout);

            bulkConnection.closeJob(job.getId());

            String[] queryResults = null;

            for (int i = 0; i < 10000; i++) {
                Thread.sleep(30000); // 30 sec
                info = bulkConnection.getBatchInfo(job.getId(), info.getId());

                if (info.getState() == BatchStateEnum.Completed) {
                    QueryResultList list = bulkConnection.getQueryResultList(job.getId(), info.getId());
                    queryResults = list.getResult();
                    break;
                } else if (info.getState() == BatchStateEnum.Failed) {
                    System.out.println("-------------- failed ----------" + info);
                    break;
                } else {
                    System.out.println("*****************************************");
                    System.out.println("-------------- waiting ----------" + info);
                    System.out.println("*****************************************");
                }
            }

            if (queryResults != null) {
                for (String resultId : queryResults) {
                    System.out.println("*****************************************");
                    System.out.println("-------------- RESULT ----------" + resultId);
                    System.out.println("*****************************************");
                    InputStream stream = bulkConnection.getQueryResultStream(job.getId(), info.getId(), resultId);

                    System.out.println("*****************************************");
                    System.out.println("-------------- GOT THE STREAM ----------" + resultId);
                    System.out.println("*****************************************");

                    FileUtil.copy(stream, new FileOutputStream(new File("loan__Loan_Account__c.csv")), true);
                }
            }
        } catch (AsyncApiException aae) {
            aae.printStackTrace();
        } catch (InterruptedException ie) {
            ie.printStackTrace();
        } catch (Exception ie) {
            ie.printStackTrace();
        }
    }

    private boolean loginToTheSoapEndpoint()  {
        boolean success = false;

        String soapAuthEndPoint = "https://" + loginHost + soapService;

        try {
            ConnectorConfig config = new ConnectorConfig();
            config.setUsername(connectionAttributes.getUsername());
            config.setPassword(connectionAttributes.getPassword());
            config.setAuthEndpoint(soapAuthEndPoint);
            config.setCompression(true);
            //config.setTraceFile("traceLogs.txt");
            //config.setTraceMessage(true);
            //config.setPrettyPrintXml(true);
            System.out.println("AuthEndpoint: " + config.getAuthEndpoint());
            partnerConnection = new PartnerConnection(config);
            System.out.println("SessionID: " + config.getSessionId());

            ConnectorConfig metaConfig = new ConnectorConfig();
            metaConfig.setSessionId(config.getSessionId());

            String soapEndpoint = config.getServiceEndpoint();
            String apiVersion = "42.0";
            String bulkAuthEndPoint = soapEndpoint.substring(0, soapEndpoint.indexOf("Soap/")) +
                    "async/" + apiVersion;
            config.setRestEndpoint(bulkAuthEndPoint);
            System.out.println("RestEndpoint: " + config.getRestEndpoint());
            bulkConnection = new BulkConnection(config);
            success = true;
        } catch (AsyncApiException aae) {
            aae.printStackTrace();
        } catch (ConnectionException ce) {
            ce.printStackTrace();
        } catch (Exception fnfe) {
            fnfe.printStackTrace();
        }
        return success;
    }

    public void configure() {
        setLinesToSkip(1);

        DefaultLineMapper<ClsContract> lineMapper = new DefaultLineMapper<ClsContract>();

        DelimitedLineTokenizer tokenizer = new DelimitedLineTokenizer();

        lineMapper.setLineTokenizer(tokenizer);
        lineMapper.setFieldSetMapper(new ContractFieldSetMapper());

        ContractCSVHeaderCallback headerCallBack = new ContractCSVHeaderCallback(tokenizer);

        setLineMapper(lineMapper);
        setSkippedLinesCallback(headerCallBack);
    }

    private SalesforceConnectionAttributes createSalesforceConnectionAttributes() {
        SalesforceConnectionAttributes attributes = new SalesforceConnectionAttributes();
        attributes.setClientId(tenantEnvironment.getClientId());
        attributes.setClientSecret(tenantEnvironment.getClientSecret());
        attributes.setLoginUrl(tenantEnvironment.getLoginUrl());
        attributes.setUsername(tenantEnvironment.getUserName());
        attributes.setPassword(tenantEnvironment.getPassword());
        attributes.setServiceUrl(tenantEnvironment.getServiceUrl());
        return attributes;
    }
}
