/*
 * Copyright (c) 2018,  Cloud Lending, a Q2 Company.
 * All Rights Reserved.
 */

package com.cls.platform.controller;

import com.cls.platform.core.BatchJobParameters;
import com.cls.platform.entity.BatchJob;
import com.cls.platform.entity.BatchJobRun;
import com.cls.platform.repository.BatchJobRepository;
import com.cls.platform.repository.BatchJobRunRepository;
import com.cls.platform.repository.TenantRepository;
import com.cls.platform.repository.operations.BatchJobDBOperations;
import com.cls.platform.repository.operations.BatchJobRunDBOperations;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.batch.core.Job;
import org.springframework.batch.core.JobExecution;
import org.springframework.batch.core.JobParameters;
import org.springframework.batch.core.JobParametersBuilder;
import org.springframework.batch.core.launch.JobLauncher;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.Set;

@RestController
@RequestMapping("/batchjob")
public class BatchJobRestController {

    private final Logger log = LoggerFactory.getLogger(BatchJobRestController.class);


    @Autowired  // This gets the bean called batchJobRepository
                // Which is auto-generated by Spring, we will use it to handle the data
    private BatchJobRepository batchJobRepository;

    @Autowired
    private TenantRepository tenantRepository;

    @Autowired
    private BatchJobRunRepository batchJobRunRepository;

    @Autowired
    JobLauncher jobLauncher;

    @Autowired
    Job job;

    @RequestMapping(method=RequestMethod.GET, path="/findByTenant")
    public Set<BatchJob> getBatchJob(@RequestParam(value="tenantName", defaultValue="ABN") String tenantName) {
        //example request: http://localhost:8080/batch?tenantName=ABN
        return BatchJobDBOperations.getBatchJobs(batchJobRepository, tenantName);
    }

    @RequestMapping(method={RequestMethod.PUT}, path="/new")
    public BatchJob createBatchJob(@RequestBody BatchJob batchJob) {

        //example request: http://localhost:8080/batchjob/new, header: Content-Type=application/json,
        //body: {
        //    "name": "PaymentCreationJob",
        //    "batchHandlerRESTApi": "https://cs10.salesforce.com/services/apexrest/v1/loanPaymentCreation",
        //    "query": "SELECT id, name FROM loan__Loan_Account__c",
        //    "tenant": {
        //        "name": "ABN"
        //    }

        return BatchJobDBOperations.createBatchJob(tenantRepository, batchJobRepository, batchJob);
    }

    @RequestMapping(method={RequestMethod.POST}, path="/run")
    public BatchJobRun runBatchJob(@RequestParam (value="tenantName") String tenantName,
                                   @RequestParam (value="batchJobName") String batchJobName,
                                   @RequestParam (value="environmentName") String environmentName) throws Exception {

        //example request:
        // http://localhost:8080/batchjob/run?tenantName=ABN&batchJobName=PaymentCreationJob&environmentName="sandbox"

        log.debug("Running batchJob " + batchJobName);
        BatchJobRun batchJobRun = BatchJobRunDBOperations.createBatchJobRun(tenantRepository, batchJobRepository,
                batchJobRunRepository, tenantName, batchJobName
                );

        //Setting job parameters
        JobParametersBuilder jobBuilder= new JobParametersBuilder();
        jobBuilder.addString(BatchJobParameters.TENANT_PARAM, tenantName);
        jobBuilder.addString(BatchJobParameters.BATCH_JOB_NAME_PARAM, batchJobName);
        jobBuilder.addString(BatchJobParameters.BATCH_JOB_INSTANCE_ID_PARAM, batchJobRun.getId().toString());
        if (environmentName != null && !environmentName.isEmpty()) {
            jobBuilder.addString(BatchJobParameters.ENVIRONMENT_PARAM, environmentName);
        }
        JobParameters jobParameters = jobBuilder.toJobParameters();
        //launching the autowired job
        JobExecution execution = jobLauncher.run(job, jobParameters);
        BatchJobRunDBOperations.endBatchJobRun(batchJobRunRepository, batchJobRun);


        return batchJobRun;
    }
}
